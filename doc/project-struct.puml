@startuml
namespace db {
    class etcdConnectionOptions << (S,Aquamarine) >> {
        - endpoints []string
        - dialTimeout int

    }
}



namespace manager {
    class ClusterConfig << (S,Aquamarine) >> {
        + Namespace string
        + TTL int
        + LoopWait uint
        + RetryTimeout uint

        - checkMaster(m *Member) (MasterState, error)
        - setMaster(m *Member) error
        - setWorker(m *Member) error
        - updateMembers(m *Member) error

    }
    class Config << (S,Aquamarine) >> {
        + Cluster ClusterConfig

        - setConfigETCD(cli *v3.Client) error
        - initializeCluster() error
        - applyConfigurations() error

    }
    class KeysDCS << (S,Aquamarine) >> {
        + Config string
        + Master string
        + Workers string
        + Members string
        + Worker string

    }
    class Master << (S,Aquamarine) >> {
        + UUID string
        + TTL int

        - setMasterETCD(cli *v3.Client) error

    }
    class MasterState << (S,Aquamarine) >> {
        + Exists bool
        + IAmMaster bool
        + Unknown bool

    }
    class Member << (S,Aquamarine) >> {
        + UUID string
        + Master bool
        + ReadOnly bool

        - delMemberETCD(cli *v3.Client, key string) error

    }
    class Members << (S,Aquamarine) >> {
        + Members []Member

        - setMembersETCD(cli *v3.Client) error

    }
    class Worker << (S,Aquamarine) >> {
        + UUID string
        + TTL int
        + Running bool

        - setWorkerETCD(cli *v3.Client) error

    }
}


"manager.Config" o-- "manager.ClusterConfig"
"manager.Members" o-- "manager.Member"

namespace pipeline {
    class Pipeline << (S,Aquamarine) >> {
        + Steps []Step

    }
    class PipelineRawString << (S,Aquamarine) >> {
        + Content string

    }
    class Step << (S,Aquamarine) >> {
        + Name string
        + Image string
        + Commands []string

    }
}


"pipeline.Pipeline" o-- "pipeline.Step"

namespace scripts {
    class rewriter << (S,Aquamarine) >> {
        - ctx context.Context
        - prefix string
        - input *bufio.Reader

        - watch() 
        - writeToOutput(line string) 
        - rewriteInput() <font color=blue>chan</font> error

    }
}



namespace sources {
    class Credentials << (S,Aquamarine) >> {
        + Username string
        + Password string
        + Token string

    }
    class Job << (S,Aquamarine) >> {
        + ID int
        + IdProject int
        + JobName string
        + URL string
        + Branch string
        + Enable bool
        + Creds Credentials

    }
    class JobResponse << (S,Aquamarine) >> {
        + Job *Job
        + Message string
        + Error *string

    }
    class Jobs << (S,Aquamarine) >> {
        + Jobs []Job

    }
    class JobsResponse << (S,Aquamarine) >> {
        + Jobs *Jobs
        + Message string
        + Error *string

    }
    class KeysDCS << (S,Aquamarine) >> {
        + Projects string
        + LatestID string
        + Project string
        + Job string

    }
    class Project << (S,Aquamarine) >> {
        + ID int
        + APIKey string
        + ProjectName string

        - createProjectETCD(cli *v3.Client) error
        - deleteProjectETCD(cli *v3.Client) (bool, string, error)
        - getJobsETCD(cli *v3.Client, jobs *Jobs) error
        - createJobETCD(cli *v3.Client, j *Job) error
        - deleteJobETCD(cli *v3.Client, j *Job) (bool, error)

        + GetJobETCD(cli *v3.Client, job *Job) (bool, error)

    }
    class ProjectFull << (S,Aquamarine) >> {
        + ID int
        + APIKey string
        + ProjectName string
        + Jobs Jobs

    }
    class ProjectResponse << (S,Aquamarine) >> {
        + Project *Project
        + Message string
        + Error *string

    }
    class Projects << (S,Aquamarine) >> {
        + Projects []Project

    }
    class ProjectsResponse << (S,Aquamarine) >> {
        + Projects *Projects
        + Message string
        + Error *string

    }
    class Response << (S,Aquamarine) >> {
        + Message string
        + Error *string

    }
}


"sources.Job" o-- "sources.Credentials"
"sources.JobResponse" o-- "sources.Job"
"sources.Jobs" o-- "sources.Job"
"sources.JobsResponse" o-- "sources.Jobs"
"sources.ProjectFull" o-- "sources.Jobs"
"sources.ProjectResponse" o-- "sources.Project"
"sources.Projects" o-- "sources.Project"
"sources.ProjectsResponse" o-- "sources.Projects"

namespace taskpkg {
    class KeysDCS << (S,Aquamarine) >> {
        + Tasks string
        + TasksHistory string
        + TaskProject string
        + TaskLatestId string

    }
    class Task << (S,Aquamarine) >> {
        + ID int
        + ProjectID int
        + JobID int
        + Name string
        + Status TaskResult
        + CreateAt *time.Time
        + NumberOfRetriesOnError int

    }
    class TaskResponse << (S,Aquamarine) >> {
        + Task *Task
        + Message string
        + Error *string

    }
    class TaskResult << (S,Aquamarine) >> {
        + Status TaskStatus
        + Message string
        + RetryCount int
        + RunningAt *time.Time
        + WorkerUUID string

    }
    class Tasks << (S,Aquamarine) >> {
        + Tasks []Task

    }
    class TasksResponse << (S,Aquamarine) >> {
        + Tasks *Tasks
        + Message string
        + Error *string

    }
    class taskpkg.TaskStatus << (T, #FF7700) >>  {
    }
}


"taskpkg.Task" o-- "taskpkg.TaskResult"
"taskpkg.Task" o-- "time.Time"
"taskpkg.TaskResponse" o-- "taskpkg.Task"
"taskpkg.TaskResult" o-- "taskpkg.TaskStatus"
"taskpkg.TaskResult" o-- "time.Time"
"taskpkg.Tasks" o-- "taskpkg.Task"
"taskpkg.TasksResponse" o-- "taskpkg.Tasks"

"__builtin__.int" #.. "taskpkg.TaskStatus"
@enduml
