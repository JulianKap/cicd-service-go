@startuml
package "cicd-service-go" {
    class utility {
        +ConfigureLogger()
        +InitConfig()
        +GenerateUUID()
        +GenerateToken()
        +GetHostIP()
        +RemovePrefixAuthBearer()
    }

    class db {
        +InstanceETCD *clientv3.Client
        +InitInstanceETCD()
        -initETCD()
    }

    class secrets {
        +InstanceVault *api.Client
        +InitInstanceVault()
        -initVault()
    }


    class etcd {
        +SetKey()
        +SetKeyTTL()
        +IsTTLValid()
        +GetKey()
        +GetKeyInt()
        +DelKey()
        +DelKeyRecursive()
    }

    class vault {
        +Token struct
        +SetToken()
        +GetToken()
        +DelToken()
    }

    class main {
        -init()
        +main()
    }

    class manager {
        +KeysDCS struct
        +ClusterConfig struct
        +Config struct
        +RoleStatus int
        +Member struct
        +Members struct
        +MasterState struct
        +Master struct
        +Worker struct

        +InitManager()
        +RunManager()
        - applyConfigurations()
        - checkMaster()
        - setMaster()
        - setWorker()
        - updateMembers()
'        - setConfigETCD()
'        - setMasterETCD()
'        - delMemberETCD()
'        - setMembersETCD()
'        - delMembersETCD()
'        - setWorkerETCD()
    }

    class service {
        +Start()
        -runEchoServer()
        -runProfilingServer()
        -startFramework()
        -initRoutes()
        -allProjectsAuthMiddleware()
        -projectAuthMiddleware()
    }

    class scheduler {
        +RunCron()
        +GetMemberWithMinTasks()
        -runSchedule()
        -runScheduleWorker()
        -tasksScheduler()
        -setTaskInHistory()
        -tasksSchedulerWorker()
    }

    class sources {
        +Credentials struct
        +Project struct
        +Projects struct
        +Job struct
        +Jobs struct
        +HandleProjectCreate()
        +HandleProjectsGetList()
        +HandleProjectGetByID()
        +HandleProjectDeleteByID()
        +HandleJobCreate()
        +HandleJobsGetList()
        +HandleJobGetByID()
        +HandleJobDeleteByID()
        +ValidatePermission()
        +ValidateProject()
        +ValidateProjectById()
        +ValidateJob()
        +GetProjectPathToken()
        + GetJobETCD()
'        - createProjectETCD()
'        - deleteProjectETCD()
'        - getJobsETCD()
'        - createJobETCD()
'        - deleteJobETCD()
        - createTokenProjectVault()
    }

    class taskpkg {
        +TaskStatus int
        +TaskResult struct
        +Task struct
        +Tasks struct
        +TaskResponse struct
        +TasksResponse struct
        +PrepareStepCommand()
        +HandleTaskCreate()
        +HandleTasksGetList()
        +HandleTaskGetByID()
        +HandleTaskDeleteByID()
'        - getTaskByProjectETCD()
'        - setTaskByProjectETCD()
'        - markerDelTaskByProjectETCD()
'        - getTasksETCD()
'        - setTasksETCD()
'        - getTasksByProjectETCD()
    }

    class worker {
        +RunWorkerTask()
    }

    class pipeline {
        +Step struct
        +Pipeline struct
        +PipelineRawString struct
        +GetPipeline()
        -parsePipeline()
        -getPipelineFromGit()
    }

    class scripts {
        +PullImage()
        +RunCommandImage()
    }

    main --> utility
    main --> db
    main --> secrets
    main --> manager
    main --> scheduler
    main --> service

    db --> utility
    etcd *-- db

    secrets --> utility
    vault *-- secrets

    service ----> vault
    service ---> sources
    service ---> taskpkg

    manager ---> etcd
    manager ---> utility

    scheduler --> worker
    scheduler ---> taskpkg
    scheduler ---> manager
    scheduler ---> etcd

    worker --> sources
    worker --> taskpkg
    worker o--> pipeline
    worker o--> scripts
    worker --> utility
}

@enduml
